; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "VideoConverter"
#ifndef MyAppVersion
#define MyAppVersion "0.5.1"
#endif
#define MyAppPublisher "WormieCorp"
#define MyAppURL "https://github.com/AdmiringWorm/VideoConverter"
#define MyAppExeName "VideoConverter.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{E91D7E52-48A5-4BEA-A63F-76C327D0C689}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
LicenseFile=..\LICENSE.txt
OutputDir=..\.artifacts
OutputBaseFilename={#MyAppName}-{#MyAppVersion}
Compression=lzma2/ultra64
SolidCompression=yes
AllowUNCPath=False
ShowLanguageDialog=auto
DisableProgramGroupPage=yes
CloseApplications=no
RestartApplications=False
UninstallDisplayName={#MyAppName} v{#MyAppVersion}
VersionInfoTextVersion={#MyAppVersion}
VersionInfoProductName={#MyAppName}
VersionInfoProductTextVersion={#MyAppVersion}
ArchitecturesInstallIn64BitMode=x64
ArchitecturesAllowed=x64
InternalCompressLevel=ultra64
PrivilegesRequiredOverridesAllowed=commandline
MinVersion=0,6.1sp1
DefaultDirName={commonpf}\{#MyAppName}
ChangesEnvironment=True
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\.artifacts\output\{#MyAppExeName}"; DestDir: "{app}\bin"
Source: "..\.artifacts\output\*.dll"; DestDir: "{app}\bin"; Flags: createallsubdirs recursesubdirs
Source: "..\.artifacts\output\*.exe"; DestDir: "{app}\bin"; Excludes: "{#MyAppExeName}"
Source: "..\.artifacts\output\*.json"; DestDir: "{app}\bin"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "..\LICENSE.txt"; DestDir: "{app}"; Flags: ignoreversion

[ThirdParty]
UseRelativePaths=True

[Tasks]
Name: "modifypath"; Description: "Add application Directory to your environmental path"

[Registry]
Root: "HKLM"; Subkey: "SOFTWARE\{#MyAppName}"; ValueType: string; ValueName: "DisplayName"; ValueData: "{#MyAppName}"; Flags: createvalueifdoesntexist uninsdeletekey
Root: "HKLM"; Subkey: "SOFTWARE\{#MyAppName}"; ValueType: string; ValueName: "InstallPath"; ValueData: "{app}"; Flags: createvalueifdoesntexist uninsdeletekey
Root: "HKLM"; Subkey: "SOFTWARE\{#MyAppName}"; ValueType: string; ValueName: "CurrentVersion"; ValueData: "{#MyAppVersion}"; Flags: uninsdeletekey

[Code]
const
    ModpathName = 'modifypath';
    ModPathType = 'system';

function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := ''
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUninstallString);
  Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
  Result := (GetUnInstallString() <> '');
end;

function UnInstallOldVersion(): Integer;
var
  sUninstallString: String;
  iResultCode: Integer;
begin
{ Return Values: }
{ 1 - uninstall string is empty }
{ 2 - error executing the UnInstallString }
{ 3 - successfully executed the UnInstallString }

  { default return value }
  Result := 0;

  { get the uninstall string of the old app }
  sUnInstallString := GetUnInstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUninstallString);
    if Exec(sUnInstallString, '/VERYSILENT /NORESTART /SUPPRESSMSGBOXES', '', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2
  end else
    Result := 1
end;

function ModPathDir(): TArrayOfString;
begin
    setArrayLength(Result, 1)
    Result[0] := ExpandConstant('{app}') + '\bin';
end;
#include "modpath.iss"

procedure CurStepChanged(CurStep: TSetupStep);
var
	taskname:	String;
begin
	taskname := ModPathName;
	if CurStep = ssPostInstall then begin
		if WizardIsTaskSelected(taskname) then
    begin
			ModPath();
    end;
  end else begin
    if CurStep = ssInstall then
      if IsUpgrade() then
        UnInstallOldVersion();
  end;
end;
